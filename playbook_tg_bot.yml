- name: deplot bot
  hosts: TG
  become: yes
  vars:
    tg_repo: "https://github.com/NopiumE/devops.git"
    repo_dir: "/tg"
    tg_dir: "{{ repo_dir }}/bot"
  tasks:
    - name: inst packages
      apt:
        name:
          - python3
          - python3-pip
          - git
        state: present
        update_cache: yes

    - name: download bot
      git:
        repo: "{{ tg_repo }}"
        dest: "{{ repo_dir }}"
        version: devops

    - name: pckg for python
      pip:
        requirements: "{{ tg_dir }}/requirements.txt"

    - name: config .env for bot
      copy:
        dest: "{{ tg_dir }}/.env"
        content: |
          TOKEN={{ hostvars[inventory_hostname]['TOKEN'] }}
          RM_PASSWORD={{ hostvars[inventory_hostname]['RM_PASSWORD'] }}
          RM_HOST={{ hostvars[inventory_hostname]['RM_HOST'] }}
          RM_PORT={{ hostvars[inventory_hostname]['RM_PORT'] }}
          RM_USER={{ hostvars[inventory_hostname]['RM_USER'] }}
          DB_HOST={{ hostvars[inventory_hostname]['DB_HOST'] }}
          DB_PORT={{ hostvars[inventory_hostname]['DB_PORT'] }}
          DB_USER={{ hostvars[inventory_hostname]['DB_USER'] }}
          DB_PASSWORD={{ hostvars[inventory_hostname]['DB_PASSWORD'] }}
          DB_DATABASE={{ hostvars[inventory_hostname]['DB_DATABASE'] }}

    - name: create service for bot
      copy:
        dest: /etc/systemd/system/tg.service
        content: |
          [Unit]
          Description=TG
          After=network.target

          [Service]
          User=root
          WorkingDirectory={{ tg_dir }}
          EnvironmentFile={{ tg_dir }}/.env
          ExecStart=/usr/bin/python3 {{ tg_dir }}/bot.py
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: start bot
      systemd:
        name: tg
        state: started
        enabled: yes

- name: for db_hosts
  hosts: db_hosts
  become: yes
  tasks:
    - name: apt update&upgrade packages
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 100000

    - name: key for psql
      apt_key:
        url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
        state: present

    - name: rep for psql
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ jammy-pgdg main"
        state: present
        filename: "PostgreSQL_repo"

    - name: pckgs for psql
      apt:
        name:
          - postgresql-15
          - postgresql-contrib
        state: present

    - name: pip3
      apt:
        name: python3-pip
        state: present
    
    - name: psycopg2
      pip:
        name: psycopg2-binary
        state: present

    - name: check if psql doesn't downloaded
      command: "psql --version"
      ignore_errors: yes
      register: psql_version

    - name: error if not installed
      fail:
        msg: "PostgreSQL has not been installed"
      when: psql_version.failed

    - name: cluster stat
      command: pg_ctlcluster 15 main status
      ignore_errors: yes
      register: postgres_status

    - name: started cluster if not
      command: pg_ctlcluster 15 main start
      when: postgres_status is defined and postgres_status.stdout.find('is not running') != -1

- name: main db config
  hosts: DB
  become: yes
  tasks:

    - name: create dirs
      file:
        path: /oracle/pg_data/archive/
        state: directory
        owner: postgres
        group: postgres
        mode: '0755'
        recurse: yes
        
    - name: pg_hba.conf
      blockinfile:
        create: true
        path: /etc/postgresql/15/main/pg_hba.conf
        block: |
          local all {{ hostvars[inventory_hostname]['DB_USER'] }} peer
          host all all "{{ hostvars[inventory_hostname]['DB_HOST'] }}"/24 trust
          host replication {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} {{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}/24 trust

    - name: postgresql.conf
      blockinfile:
        create: true
        path: /etc/postgresql/15/main/postgresql.conf
        block: | 
          listen_addresses = '*'
          port = 5432
          log_destination = 'stderr'
          logging_collector = on
          log_directory = '/var/log/postgresql/'
          log_filename = 'postgresql.log'
          log_file_mode = 0644
          archive_mode = on
          archive_command = 'cp %p /oracle/pg_data/archive/%f'
          max_wal_senders = 10
          wal_level = replica
          wal_log_hints = on
          log_replication_commands = on

    - name: restart main db
      service:
        name: postgresql
        state: restarted

    - name: create db
      community.general.postgresql_db:
        name: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        encoding: UTF-8
        template: template0
      become: yes
      become_user: postgres

    - name: create tables
      shell: |
        psql -d {{ hostvars[inventory_hostname]['DB_DATABASE'] }} -c "CREATE TABLE IF NOT EXISTS emails (id serial PRIMARY KEY, email text);"
        psql -d {{ hostvars[inventory_hostname]['DB_DATABASE'] }} -c "CREATE TABLE IF NOT EXISTS numbers (id serial PRIMARY KEY, phone_number text);"
      become_user: postgres
      ignore_errors: true

    - name: Change passwd for postgresql
      command: psql -c "ALTER USER {{ hostvars[inventory_hostname]['DB_USER'] }} WITH PASSWORD '{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}';"
      become_user: postgres

    - name: user for repl
      command: psql -c "DO $$ BEGIN CREATE ROLE {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} REPLICATION LOGIN SUPERUSER PASSWORD '{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}'; EXCEPTION WHEN duplicate_object THEN NULL; END $$;"
      become_user: postgres

- name: repl config
  hosts: DB_repl
  become: yes
  tasks:
    - name: check if run
      ansible.builtin.command:
        cmd: "pg_ctlcluster 15 main status"
      register: postgres_status
      ignore_errors: true
      become: yes
      become_user: root

    - name: create cluster if not
      ansible.builtin.command:
        cmd: "pg_createcluster 15 main"
      when: postgres_status.stdout.find('specified cluster \'15 main\' does not exist') != -1
      become: yes
      become_user: root

    - name: postgresql.conf
      blockinfile:
        create: true
        path: /etc/postgresql/15/main/postgresql.conf
        block: |
          listen_addresses = 'localhost, {{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}'
          port = {{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}

    - name: Stop PostgreSQL service before backup
      service:
        name: postgresql
        state: stopped

    - name: Clean up old data before backup
      command: rm -rf /var/lib/postgresql/15/main/*
      become_user: root

    - name: Ensure directory is clean before backup
      command: find /var/lib/postgresql/15/main/ -mindepth 1 -delete
      become: true

    - name: Perform pg_basebackup 
      command: pg_basebackup -R -h {{ hostvars[inventory_hostname]['DB_HOST'] }} -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} -D /var/lib/postgresql/15/main -P 
      become_user: postgres
      environment:
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"

    - name: Set permissions for the replication directory
      file:
        path: /var/lib/postgresql/15/main/
        owner: postgres
        group: postgres
        recurse: yes
      become: true

    - name: Ensure proper ownership for PostgreSQL directory
      command: chown -R postgres:postgres /var/lib/postgresql/
      become: true

    - name: Start PostgreSQL service
      service:
        name: postgresql
        state: started
